<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dylan Gregersen - Programming</title><link href="/" rel="alternate"></link><link href="/feeds/programming.atom.xml" rel="self"></link><id>/</id><updated>2014-12-18T09:28:50-07:00</updated><subtitle>"You are something the whole Universe is doing, the same way a wave is something the whole ocean is doing" â€• Alan W. Watts</subtitle><entry><title>Practical Tools for Matplotlib Colormaps</title><link href="/blog/programming/2014/12/practical-tools-for-matplotlib-colormaps" rel="alternate"></link><published>2014-12-18T09:28:50-07:00</published><updated>2014-12-18T09:28:50-07:00</updated><author><name>Dylan Gregersen</name></author><id>tag:None,2014-12-18:/blog/programming/2014/12/practical-tools-for-matplotlib-colormaps</id><summary type="html">&lt;p&gt;Choosing a good colormap is hard. Jet always looks pretty but just try printing in black &amp;amp; white and everything you thought you knew about your data changes. I have several resources I use when picking a good colormap. Click the Read more to find out more.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like colorful plots. They may cost &lt;a href="http://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html"&gt;alot&lt;/a&gt; to publish in a research journal but they're just so pretty. Quite a few blogs have been written ranting about rainbow colormaps and also about how to choose really good colormaps.&lt;/p&gt;
&lt;p&gt;This blog is devoted to practical tools I use to help me with colormapping. The actual code is in a github gist of &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Some other useful colormap links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/users/colormaps.html"&gt;Maplotlib: Choosing Colormaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/"&gt;Jake Vanderplas: How bad is your colormap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://colormap.org/"&gt;Custom Colormap Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For general color layouts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://colorbrewer2.org/"&gt;Colorbrewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paletton.com/#uid=1000u0kllllaFw0g0qFqFg0w0aF"&gt;Paletton&lt;/a&gt; - a really cool color scheme tool which includes tools to filter by colorblindness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Below is a really cool colormap image of the Milky Way's magnetic field &lt;a href="http://public.planck.fr/resultats/249-planck-revele-l-invisible"&gt;captured by the Planck spacecraft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/static/img/blog/Plank-Galactic-Magentic-Field-640x640.jpg" alt="Plank Galactic Magnetic Field" style="height: 100%; width: 100%; max-height:500px; "&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2&gt;Colormap Reference&lt;/h2&gt;
&lt;p&gt;Several colormap references scripts/functions exist; mine is better (haha). In my &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt; file I have a function called &lt;code&gt;show_mpl_cmaps&lt;/code&gt;. This uses a lookup table to group together relevant colormaps and a graifier to also show what that colormap looks like in gray scale. I've added this to my PYTHONSTARTUP script so when I need a quick reference I can just open a terminal and type &lt;code&gt;show_mpl_cmaps()&lt;/code&gt; to get:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Matplotlib Colormaps" src="/static/img/blog/mpl_colormaps.png"&gt;{}&lt;/p&gt;
&lt;h2&gt;Truncating Colormaps&lt;/h2&gt;
&lt;p&gt;Search Keywords: Reducing color range, shorten colormap, remove white from colormap&lt;/p&gt;
&lt;p&gt;I searched for a while and could find something that made a colormap cut off certain colors. For example, taking the &lt;code&gt;plt.cm.rainbow&lt;/code&gt; and reducing it to only blue to orange (I know rainbow is terrible, but humor me). Or you want to use &lt;code&gt;plt.cm.gist_heat&lt;/code&gt; but cut off the white top.&lt;/p&gt;
&lt;p&gt;I hope if you're reading this I can save you some time in having already worked out a good way to truncate a colormap. It's a pretty short function I called &lt;code&gt;truncate_cmap&lt;/code&gt; which I've included in &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt; gist.&lt;/p&gt;
&lt;div class="row mpl-cmap"&gt;
&lt;div class="span6"&gt;
&lt;div class="cmap-image-header"&gt;&lt;p&gt;plt.colormap(plt.imshow(cnts,cmap=plt.cm.rainbow))&lt;/p&gt;
&lt;/div&gt;
&lt;img src="/static/img/blog/cmap_rainbow.svg" alt="Colormap"&gt;&lt;/img&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;div class="cmap-image-header"&gt;&lt;p&gt;plt.colormap(plt.imshow(cnts,cmap=truncate_cmap(plt.cm.rainbow,n_min=40,n_max=210))&lt;/p&gt;
&lt;/div&gt;
&lt;img src="/static/img/blog/cmap_rainbow_truncated.svg" alt="Truncated Colormap"&gt;&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;The MonoColorMap&lt;/h2&gt;
&lt;p&gt;The final tool I'll leave you with is my own...&lt;code&gt;MonoColormap&lt;/code&gt;. It's a silly colormap which always returns the same color (hence mono-color). You instantiate it &lt;code&gt;cmap=MonoColormap('r')&lt;/code&gt; and can use any maplotlib color or hex color. I found it useful when I wanted to overplot some image but just have it gray out with some opacity. It's also located in &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt; gist.&lt;/p&gt;</content><category term="Programming"></category><category term="plotting"></category><category term="programming"></category><category term="python"></category><category term="matplotlib"></category><category term="colormaps"></category></entry><entry><title>Python 3 All the Things!</title><link href="/blog/programming/2014/10/python-3-all-the-things" rel="alternate"></link><published>2014-10-09T19:05:59-06:00</published><updated>2014-10-09T19:05:59-06:00</updated><author><name>Dylan Gregersen</name></author><id>tag:None,2014-10-09:/blog/programming/2014/10/python-3-all-the-things</id><summary type="html">&lt;p&gt;I just gave a Python3 talk to &lt;a href=""&gt;SLCPython Meetup&lt;/a&gt; Here are some links and resources to find out more about all the hype&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Yesterday gave a talk at &lt;a href="http://www.slcpy.com"&gt;SLCPython Meetup&lt;/a&gt; Group about Python3. When I agreed to give this talk I had already read through many of the pages of changes (e.g. &lt;a href="https://docs.python.org/3.0/whatsnew/3.0.html"&gt;What's new in Python 3&lt;/a&gt;) and felt like I had a pretty good understanding of the changes. The thing I didn't realize was how much I would be learning about unicode.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/astrodsg/Python2to3"&gt;Click here for Resources from my talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Why Unicode is a Step Forward&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Python 2 had several implicit uses of &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; encoding/decoding. ASCII was the first, widely accepted system for encoding human language (i.e. English) to computer bytes. This process is necessary because humans don't express themselves well in bytes and computers don't do well with language.&lt;/p&gt;
&lt;p&gt;Many human languages exist. Each has its own ways to express ideas. As computers have evolved and become used all around the globe the need for computers to encode/decode more than just English is paramount. The development of the &lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; system characters is a major step to solving this problem. The next step is for developers to implement Unicode as a foundation for computer systems. This step will make computers more accessible to people of all backgrounds and cultures.&lt;/p&gt;
&lt;p&gt;&lt;img alt="It's a Unicode Party (Sorry this is mostly white folk, but it's fun gif)" src="/static/img/blog/its_a_party.gif" style="width: 50%; display: inline-block;"/&gt;
&lt;img alt="Unicode Hello World" src="/static/img/blog/hello_world_all.png" style="width: 50%; display: inline-block; float:right;"/&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Python Adoption of Unicode&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Unicode handling is the primary reason for the break in backwards compatibility. In the words of core developer &lt;a href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html"&gt;Nick Coghlan&lt;/a&gt; "Fixing [Unicode handling bugs] within the constraints of the Python 2 text model is considered too hard to be worth the effort."&lt;/p&gt;
&lt;p&gt;The new text model in Python 3 treats all text as either byte arrays (machine language) or Unicode (human language(s)) with more explicit encoding/decoding. The diagram which helped me was this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/static/img/blog/unicode_sandwich.jpg" alt="Unicode Sandwich" style="width:60%;"/&gt;&lt;/p&gt;
&lt;p&gt;On the outside of the sandwich there's the computer and byte storage, on the inside is the Unicode which humans understand.&lt;/p&gt;
&lt;p&gt;This new text model also allows people to write code using any Unicode character. For example, &lt;a href="https://github.com/renyuanL/pythonTurtleInChinese"&gt;these scripts&lt;/a&gt; published on github use chinese characters (pretty fracking cool).&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Fixing Up Loose Ends&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Since the core developers broke backwards compatibility anyway, this has been a great opportunity to fix up many of the inconsistencies and gotcha's of Python 2. These are the changes most of us will notice. Things like maing &lt;code&gt;print&lt;/code&gt; a function or the deprecation of many functions and class methods (like &lt;code&gt;raw_input&lt;/code&gt; or &lt;code&gt;dict.iterkeys&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I found it useful to look online at several of the "what's new guides". I think &lt;a href="http://docs.pythonsprints.com/python3_porting/py-porting.html"&gt;Brian Curtin's Porting Guide&lt;/a&gt; is a nice and succinct place to start.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Python3 Wants You" src="/static/img/blog/Python3_wants_you.png" style="margin-top:80px; margin-bottom: 30px; height: 20%;"/&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Now is the Time!&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Python is a powerful language mostly because of it's libraries build by the community. The fear was that these packages would have trouble converting to Python3 (maybe never do) and that would be the end of Python. However, it seams to me that fear is no longer valid. By several measures, we're now at 75% support of Python3 by major libraries. One of these measures, is the &lt;a href="http://py3readiness.org/"&gt;Python 3 Readiness&lt;/a&gt; site which looks at the top 360 &lt;code&gt;pip&lt;/code&gt; packages and the adoption of Python3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://py3readiness.org/"&gt;
&lt;img alt="Python3 Readiness" src="/static/img/blog/Python3_Readiness.png"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With almost all major libraries now supporting Python 3, it's up to the rest of us to adopt this new language. Good luck!&lt;/p&gt;
&lt;h1&gt;Other Online Materials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.0/whatsnew/3.0.html"&gt;What's New in Python 3&lt;/a&gt; â€“ for most of the Python 2.7 to Python 3 changes.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/whatsnew/"&gt;What's New&lt;/a&gt; â€“ for a VERY long list of everything new (though check out the dense but "short" summary)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nedbatchelder.com/text/unipain.html"&gt;Pragmatic Unicode talk/essay&lt;/a&gt; â€“ or "Why Python 3 Exists" - Coghlan&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pythonsprints.com/python3_porting/py-porting.html"&gt;Python 3 Porting Guide&lt;/a&gt; â€“ nice quick reference for things which have changed from 2.x to 3x&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python3porting.com/"&gt;Porting to Python 3: An in-depth guide&lt;/a&gt; â€“ Definitely in depth&lt;/li&gt;
&lt;/ul&gt;</content><category term="Programming"></category><category term="python"></category><category term="python3"></category><category term="programming"></category><category term="2to3"></category></entry></feed>